<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TestBase</name>
    </assembly>
    <members>
        <member name="T:TestBase.Assert">
            <summary>Static convenience methods for invoking <see cref="T:TestBase.Assertion"/>s.</summary>
        </member>
        <member name="M:TestBase.Assert.That``1(``0,System.Linq.Expressions.Expression{System.Func{``0,TestBase.BoolWithString}},System.String,System.Object[])">
            <summary>
            If <paramref name="predicate"/>(<paramref name="actual"/>) evaluates to true, then <paramref name="actual"/> is returned.
            If not, an <see cref="T:TestBase.Assertion`1"/> is thrown, containing details of the assertion failure.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actual"></param>
            <param name="predicate"></param>
            <param name="comment"></param>
            <param name="commentArgs"></param>
            <returns><paramref name="actual"/>, if the precondition succeeds</returns>
            <exception cref="T:TestBase.Assertion`1">thrown if the precondition fails.</exception>
        </member>
        <member name="M:TestBase.Assert.That``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>
            If <paramref name="predicate"/>(<paramref name="actual"/>) evaluates to true, then <paramref name="actual"/> is returned.
            If not, an <see cref="T:TestBase.Assertion`1"/> is thrown, containing details of the assertion failure.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actual"></param>
            <param name="predicate"></param>
            <param name="comment"></param>
            <param name="commentArgs"></param>
            <returns><paramref name="actual"/>, if the precondition succeeds</returns>
            <exception cref="T:TestBase.Assertion`1">thrown if the precondition fails.</exception>
        </member>
        <member name="M:TestBase.Assert.That``1(``0,``0,System.Linq.Expressions.Expression{System.Func{``0,``0,TestBase.BoolWithString}},System.String,System.Object[])">
            <summary>
            If <paramref name="predicate"/>(<paramref name="actual"/>) evaluates to true, then <paramref name="actual"/> is returned.
            If not, an <see cref="T:TestBase.Assertion`1"/> is thrown, containing details of the assertion failure.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actual"></param>
            <param name="comparedTo"></param>
            <param name="predicate"></param>
            <param name="comment"></param>
            <param name="commentArgs"></param>
            <returns><paramref name="actual"/>, if the precondition succeeds</returns>
            <exception cref="T:TestBase.Assertion`1">thrown if the precondition fails.</exception>
        </member>
        <member name="M:TestBase.Assert.Precondition``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>
            If <paramref name="predicate"/>(<paramref name="actual"/>) evaluates to true, then <paramref name="actual"/> is returned.
            If not, an <see cref="M:TestBase.Assert.Precondition``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])"/> is thrown, containing details of the assertion failure.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actual"></param>
            <param name="predicate"></param>
            <param name="comment"></param>
            <param name="commentArgs"></param>
            <returns><paramref name="actual"/>, if the assertion succeeds</returns>
            <exception cref="M:TestBase.Assert.Precondition``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">thrown if the assertion fails.</exception>
        </member>
        <member name="M:TestBase.Assert.That(TestBase.BoolWithString,System.String,System.Object[])">
            <summary>
            Creates an <see cref="T:TestBase.Assertion`1"/> for the assertion <paramref name="actual"/>.
            If <paramref name="actual"/> evaluates to true, then the <see cref="T:TestBase.Assertion`1"/> is returned.
            Otherwise, it is thrown.
            If not, an <see cref="T:TestBase.Assertion`1"/> is thrown, containing details of the assertion failure.
            </summary>
            <param name="actual"></param>
            <param name="comment"></param>
            <param name="commentArgs"></param>
            <returns>An <see cref="T:TestBase.Assertion`1"/> for <paramref name="actual"/></returns>
            <exception cref="T:TestBase.Assertion`1">thrown if the precondition fails.</exception>
        </member>
        <member name="M:TestBase.Assert.Precondition(TestBase.BoolWithString,System.String,System.Object[])">
            <summary>
            Creates an <see cref="M:TestBase.Assert.Precondition``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])"/> for the assertion <paramref name="actual"/>.
            If <paramref name="actual"/> evaluates to true, then the <see cref="M:TestBase.Assert.Precondition``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])"/> is returned.
            Otherwise, it is thrown.
            If not, an <see cref="M:TestBase.Assert.Precondition``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])"/> is thrown, containing details of the assertion failure.
            </summary>
            <param name="actual"></param>
            <param name="comment"></param>
            <param name="commentArgs"></param>
            <returns>An <see cref="M:TestBase.Assert.Precondition``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])"/> for <paramref name="actual"/></returns>
            <exception cref="M:TestBase.Assert.Precondition``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">thrown if the precondition fails.</exception>
        </member>
        <member name="M:TestBase.Assert.Throws(System.Linq.Expressions.Expression{System.Action},System.String,System.Object[])">
            <summary>
            Assert that <code><paramref name="action"/>.Compile()()</code> throws, catching the exception and returning it.
            </summary>
            <returns>The caught exception.</returns>
            <exception cref="T:TestBase.ShouldHaveThrownException">is thrown if <paramref name="action"/> does not throw.</exception>
        </member>
        <member name="M:TestBase.Assert.Throws``1(System.Action,System.String,System.Object[])">
            <summary>
            Asserts that <code><paramref name="action"/>()</code> throws a <typeparamref name="TE"/>, catching the exception and returning it.
            For an overload that accepts an <see cref="T:System.Linq.Expressions.Expression`1"/> argument, see <see cref="M:TestBase.Assert.Throws(System.Linq.Expressions.Expression{System.Action},System.String,System.Object[])"/>.
            </summary>
            <typeparam name="TE"></typeparam>
            <returns>The caught exception</returns>
            <exception cref="T:TestBase.ShouldHaveThrownException">is thrown if <paramref name="action"/> does not throw.</exception>
        </member>
        <member name="M:TestBase.Assert.Throws``2(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},``1,System.String,System.Object[])">
            <summary>
            Asserts that <code><paramref name="predicate"/>( <paramref name="actual"/> )</code> throws a <typeparamref name="TE"/>, catching the exception and returning it.
            </summary>
            <typeparam name="TE"></typeparam>
            <returns>The caught exception</returns>
            <exception cref="T:TestBase.ShouldHaveThrownException">is thrown if <paramref name="predicate"/> does not throw.</exception>
        </member>
        <member name="M:TestBase.Assert.DoesNotThrow(System.Linq.Expressions.Expression{System.Action},System.String,System.Object[])">
            <summary>
            Executes <code><paramref name="action"/>()</code>. If the execution throws, the thrown exception is wrapped in an <see cref="T:TestBase.ShouldNotThrowException"/> and thrown.
            </summary>
            <returns><paramref name="action"/></returns>
            <exception cref="T:TestBase.ShouldNotThrowException">is thrown if <paramref name="action"/> throws.</exception>
        </member>
        <member name="T:TestBase.Assert.BestEffortJsonSerializerSettings.DBNullConverter">
            <summary>Converts <see cref="T:System.DBNull" /> to and from its name string value.</summary>
        </member>
        <member name="M:TestBase.Assert.BestEffortJsonSerializerSettings.DBNullConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>Writes the JSON representation of the object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:TestBase.Assert.BestEffortJsonSerializerSettings.DBNullConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>Reads the JSON representation of the object.</summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:TestBase.Assert.BestEffortJsonSerializerSettings.DBNullConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
            <returns>
            <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TestBase.ShouldHaveThrownException">
            <summary>
            An Exception indicating that an Exception was expected but was not thrown.
            </summary>
        </member>
        <member name="T:TestBase.ShouldNotThrowException">
            <summary>
            An Exception thrown when <see cref="M:TestBase.Assert.DoesNotThrow(System.Linq.Expressions.Expression{System.Action},System.String,System.Object[])"/> finds that an Assertion <em>was</em> thrown.
            </summary>
        </member>
        <member name="T:TestBase.Precondition`1">
            <summary>A Precondition is an Assertion. Calling it a precondition is presumed to indicate that it is to be understood as a precondition</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:TestBase.Assertion">
            <summary>An Assertion is throwable (it inherits from Exception) but need not indicate an assertion <em>failure</em>; it might hold an assertion pass.</summary>
        </member>
        <member name="T:TestBase.Assertion`1">
            <summary>An Assertion about an instance. 
            An Assertion is throwable (it inherits from Exception) but need not indicate an assertion failure; it might hold an assertion pass.</summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:TestBase.Assertion`1.#ctor(`0,`0,System.Linq.Expressions.Expression{System.Func{`0,`0,System.Boolean}},System.String,System.Object[])">
            <summary>
            Evaluates whether <paramref name="predicate"/> is true of <paramref name="actual"/>, and stores the result of the evaluation or, if 
            an exception is thrown during evaluation, catches and stores the exception instead.
            </summary>
            <param name="actual">The value under assertion</param>
            <param name="comparedTo">The expected value, or the 'comparable' value to be used in <paramref name="predicate"/>(actual,expected).</param>
            <param name="predicate">The predicate to apply</param>
            <param name="comment">Occurrences of "{{actual}}" in the comment string will be replace with <paramref name="actual"/>?.ToString()</param>
            <param name="commentArgs">will be inserted into <paramref name="comment"/> using string.Format()</param>
        </member>
        <member name="M:TestBase.Assertion`1.#ctor(`0,System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.String,System.Object[])">
            <summary>
            Evaluates whether <paramref name="predicate"/> is true of <paramref name="actual"/>, and stores the result of the evaluation or, if 
            an exception is thrown during evaluation, catches and stores the exception instead.
            </summary>
            <param name="actual">The value under assertion</param>
            <param name="predicate">The predicate to apply</param>
            <param name="comment">Occurrences of "{{actual}}" in the comment string will be replace with <paramref name="actual"/>?.ToString()</param>
            <param name="commentArgs">will be inserted into <paramref name="comment"/> using string.Format()</param>
        </member>
        <member name="M:TestBase.Assertion`1.#ctor(`0,System.Linq.Expressions.Expression{System.Func{`0,TestBase.BoolWithString}},System.String,System.Object[])">
            <summary>
            Evaluates whether <paramref name="predicate"/> is true of <paramref name="actual"/>, and stores the result of the evaluation or, if 
            an exception is thrown during evaluation, catches and stores the exception instead.
            </summary>
            <param name="actual">The value under assertion</param>
            <param name="predicate">The predicate to apply</param>
            <param name="comment">Occurrences of "{{actual}}" in the comment string will be replace with <paramref name="actual"/>?.ToString()</param>
            <param name="commentArgs">will be inserted into <paramref name="comment"/> using string.Format()</param>
        </member>
        <member name="F:TestBase.Assertion`1.PreferredToStringMethod">
            <summary>
            Called by <seealso cref="M:TestBase.Assertion`1.ActualToString(`0)"/>. Modify this if you want to change the method used to Stringify actual.
            </summary>
        </member>
        <member name="T:TestBase.Comparer">
            <summary>
            Compares objects memberwise by value. All Properties (public or not), and public Fields, are considered in the comparison.
            </summary>
        </member>
        <member name="M:TestBase.Comparer.PropertiesMatch(System.Object,System.Object)">
            <remarks>An abbreviation for <see cref="M:TestBase.Comparer.EqualsByValueJustOnCommonPublicReadableProperties(System.Object,System.Object)"/></remarks>
            <param name="left"></param><param name="right"></param>
            <returns>
            True, if the readable properties of <paramref name="left"/> &amp; <paramref name="right"/> with identical names are all <see cref="M:TestBase.Comparer.EqualsByValue(System.Object,System.Object)"/>
            <see cref="M:TestBase.BoolWithString.False(System.String)"/> if not, with a description of the first mismatch found in <see cref="M:TestBase.BoolWithString.ToString"/>()
            </returns>
        </member>
        <member name="M:TestBase.Comparer.EqualsByValueJustOnCommonPublicReadableProperties(System.Object,System.Object)">
            <remarks>Can be abbreviated to <see cref="M:TestBase.Comparer.PropertiesMatch(System.Object,System.Object)"/></remarks>
             <param name="left"></param><param name="right"></param>
             <returns>
             True, if the readable properties of <paramref name="left"/> &amp; <paramref name="right"/> with identical names are all <see cref="M:TestBase.Comparer.EqualsByValue(System.Object,System.Object)"/>
             <see cref="M:TestBase.BoolWithString.False(System.String)"/> if not, with a description of the first mismatch found in <see cref="M:TestBase.BoolWithString.ToString"/>()
             </returns>
        </member>
        <member name="M:TestBase.Comparer.EqualsByValueJustOnCommonPublicWriteableProperties(System.Object,System.Object)">
            <param name="left"></param><param name="right"></param>
            <returns>
            True, if the writeable properties of <paramref name="left"/> &amp; <paramref name="right"/> with identical names are all <see cref="M:TestBase.Comparer.EqualsByValue(System.Object,System.Object)"/>
            <see cref="M:TestBase.BoolWithString.False(System.String)"/> if not, with a description of the first mismatch found in <see cref="M:TestBase.BoolWithString.ToString"/>()
            </returns>
            <remarks>Writeable properties are often a subset of readable properties. Often, if an object is deserialized from a database or datastore, then it is expected to be fully specified by its writeable properties.</remarks>
        </member>
        <member name="M:TestBase.Comparer.EqualsByValueJustOnCommonPropertiesSatisfying(System.Object,System.Object,System.Func{System.Reflection.PropertyInfo,System.Boolean})">
            <param name="left"></param><param name="right"></param>
            <returns>
            True, if the properties of <paramref name="left"/> &amp; <paramref name="right"/> with identical names are all <see cref="M:TestBase.Comparer.EqualsByValue(System.Object,System.Object)"/>
            <see cref="M:TestBase.BoolWithString.False(System.String)"/> if not, with a description of the first mismatch found in <see cref="M:TestBase.BoolWithString.ToString"/>()
            </returns>
        </member>
        <member name="M:TestBase.Comparer.MemberCompare(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Double,System.Boolean)">
            <summary>
            Compare two objects by recursively iterating over their elements (if they are Enumerable) 
            and properties (public or private) and public fields.
            Recursion stops at value types and at types (including string) which override Equals()
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <param name="exclusionList">a possibly empty list of field names to exclude for the purposes of this 
                comparison. To exclude fields of fields, provide the full dotted 'breadcrumb' to the property 
                to exclude, e.g. new List&lt;string&gt;{"Id","SomeProperty.SomePropertyOfThat.FieldName"} 
            </param>
            <param name="includeOnlyList"></param>
            <param name="floatTolerance">The tolerance to apply to floating point equality comparison</param>
            <param name="typesMustAlsoBeSame"></param>
            <returns>a <see cref="T:TestBase.BoolWithString"/>. In case of failure, the reason for failure is returned.</returns>
        </member>
        <member name="M:TestBase.JsonQueryExtensions.ToJQueryable``1(``0)">
            <summary>
            Returns a <see cref="T:Newtonsoft.Json.Linq.JObject"/> which can be queried. 
            See https://www.newtonsoft.com/json/help/html/SelectToken.htm#SelectTokenJSONPath 
            for examples with Javascript,JPath &amp; Linq
            <list type="bullet">
            <item>Indexers e.g. (int)jobject["rows"][0]["id"]</item>
            <item>SelectToken() with javascript syntax, e.g. (int)jobject["rows[0].id"]</item>
            <item>SelectTokens() with JPath syntax, e.g. (int)jobject["$..rows[?(@.Price >= 50)].id"]</item>
            <item>Linq, e.g. jobject["rows"].Sum(r => (decimal)r.SelectToken("Price"))</item>
            </list>
            </summary>
            <returns>A Queryable <see cref="T:Newtonsoft.Json.Linq.JObject"/>. </returns>
        </member>
        <member name="M:TestBase.JsonQueryExtensions.ToQueryable``1(``0,Newtonsoft.Json.Formatting)">
            <summary>
            Returns a <see cref="T:Newtonsoft.Json.Linq.JObject"/> which can be queried. 
            See https://www.newtonsoft.com/json/help/html/SelectToken.htm#SelectTokenJSONPath 
            for examples with Javascript,JPath &amp; Linq
            <list type="bullet">
            <item>Indexers e.g. (int)jobject["rows"][0]["id"]</item>
            <item>SelectToken() with javascript syntax, e.g. (int)jobject["rows[0].id"]</item>
            <item>SelectTokens() with JPath syntax, e.g. (int)jobject["$..rows[?(@.Price >= 50)].id"]</item>
            <item>Linq, e.g. jobject["rows"].Sum(r => (decimal)r.SelectToken("Price"))</item>
            </list>
            </summary>
            <returns>A Queryable <see cref="T:Newtonsoft.Json.Linq.JObject"/>. </returns>
        </member>
        <member name="M:TestBase.JsonQueryExtensions.ToQueryable``1(``0,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Returns a <see cref="T:Newtonsoft.Json.Linq.JObject"/> which can be queried. 
            See https://www.newtonsoft.com/json/help/html/SelectToken.htm#SelectTokenJSONPath 
            for examples with Javascript,JPath &amp; Linq
            <list type="bullet">
            <item>Indexers e.g. (int)jobject["rows"][0]["id"]</item>
            <item>SelectToken() with javascript syntax, e.g. (int)jobject["rows[0].id"]</item>
            <item>SelectTokens() with JPath syntax, e.g. (int)jobject["$..rows[?(@.Price >= 50)].id"]</item>
            <item>Linq, e.g. jobject["rows"].Sum(r => (decimal)r.SelectToken("Price"))</item>
            </list>
            </summary>
            <returns>A Queryable <see cref="T:Newtonsoft.Json.Linq.JObject"/>. </returns>
        </member>
        <member name="M:TestBase.Pdf.AsciiBytes(System.String)">
            <summary> Because PDF standard is ASCII</summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldNotBeNull``1(``0,System.String,System.Object[])">
            <summary>Asserts that <code>actual!=null</code></summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeNull(System.Object,System.String,System.Object[])">
            <summary>Asserts that <code>actual==null</code></summary>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeNullOrEmpty(System.String,System.String,System.Object[])">
            <summary>Asserts that <code>string.IsNullOrEmpty(actual)</code></summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeEmpty(System.String,System.String,System.Object[])">
            <summary>Asserts that <code>actual.Length==0</code></summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> has no elements. This will fail if actual is null.</summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeNullOrEmptyOrWhitespace(System.Object,System.String,System.Object[])">
            <summary>Asserts that <code>string.IsNullOrWhitespace(actual.ToString())</code></summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldNotBeNullOrEmptyOrWhitespace(System.Object,System.String,System.Object[])">
            <summary>Asserts that <code>string.IsNullOrWhitespace(actual.ToString())</code> would fail.</summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBe``1(``0,``0,System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/>.Equals(<paramref name="expected"/>) or else that <paramref name="actual"/> and <paramref name="expected"/> are both null.</summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldNotBe``1(``0,``0,System.String,System.Object[])">
            <summary>Asserts that <code>actual.Equals(expected)</code> would fail (or else that <paramref name="actual"/> is null and <paramref name="notExpected"/> is not).</summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldEqual``1(``0,System.Object,System.String,System.Object[])">
            <summary>Asserts that <code><paramref name="actual"/>.Equals(<paramref name="expected"/>)</code></summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldNotEqual``1(``0,``0,System.String,System.Object[])">
            <summary>Asserts that <code>!<paramref name="actual"/>.Equals(<paramref name="notExpected"/>)</code></summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeBetween``1(``0,``0,``0,System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> is between <paramref name="left"/> and <paramref name="right"/> inclusively.</summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeTrue``1(``0,System.String,System.Object[])">
            <summary>Asserts that <code><paramref name="actual"/>.Equals(true)</code></summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeFalse``1(``0,System.String,System.Object[])">
            <summary>Asserts that <code><paramref name="actual"/>.Equals(false)</code></summary>
            /// <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeGreaterThan``1(``0,System.Object,System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> is GreaterThan <paramref name="expected"/>
            The comparer used is the NUnitComparer https://github.com/nunit/nunit/blob/master/src/NUnitFramework/framework/Constraints/NUnitComparer.cs 
            </summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeGreaterThanOrEqualTo``1(``0,System.Object,System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> is GreaterThanOrEqualTo <paramref name="expected"/>
            The comparer used is the NUnitComparer https://github.com/nunit/nunit/blob/master/src/NUnitFramework/framework/Constraints/NUnitComparer.cs 
            </summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeLessThan``1(``0,System.Object,System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> is LessThan <paramref name="expected"/>
            The comparer used is the NUnitComparer https://github.com/nunit/nunit/blob/master/src/NUnitFramework/framework/Constraints/NUnitComparer.cs 
            </summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeLessThanOrEqualTo``1(``0,System.Object,System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> is LessThanOrEqualTo <paramref name="expected"/>
            The comparer used is the NUnitComparer https://github.com/nunit/nunit/blob/master/src/NUnitFramework/framework/Constraints/NUnitComparer.cs 
            </summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeOfType``1(System.Object,System.String,System.Object[])">
            <summary>Asserts that <code><paramref name="actual"/> is <typeparamref name="T"/></code></summary>
            <returns><code>((<typeparamref name="T"/>)<paramref name="actual"/>)</code></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeOfTypeEvenIfNull``1(``0,System.Type,System.String,System.Object[])">
            <summary>Asserts that <code>typeof(<typeparamref name="T"/>) == <paramref name="type"/></code></summary>
            <returns><code><paramref name="actual"/></code></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeAssignableTo``1(System.Object,System.String,System.Object[])">
            <summary>Asserts that <code><paramref name="actual"/> is <typeparamref name="T"/></code></summary>
            <returns><code>((<typeparamref name="T"/>)<paramref name="actual"/>)</code></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBeCastableTo``1(System.Object,System.String,System.Object[])">
            <summary>Asserts that <code>((<typeparamref name="T"/>)<paramref name="actual"/>)</code> is not null.</summary>
            <returns><code>((<typeparamref name="T"/>)<paramref name="actual"/>)</code></returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldBe``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>Synonym of <seealso cref="M:TestBase.BasicShoulds.Should``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])"/> Asserts that <paramref name="actual"/> satisfies <paramref name="predicate"/></summary>
            <returns>actual</returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldNotBe``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> does not satisfy <paramref name="predicate"/></summary>
            <returns>actual</returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldSatisfy``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,System.Object[])">
            <summary>Synonym of <see cref="M:TestBase.BasicShoulds.Should``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,System.Object[])"/> Asserts that <paramref name="transform"/>(<paramref name="actual"/>) satisfies <paramref name="predicate"/></summary>
            <returns>actual</returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldSatisfy``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>Synonym of <seealso cref="M:TestBase.BasicShoulds.Should``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,System.Object[])"/>. Asserts that <paramref name="actual"/> satisfies <paramref name="predicate"/></summary>
            <returns>actual</returns>
        </member>
        <member name="M:TestBase.BasicShoulds.Should``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,System.Object[])">
            <summary>Asserts that <paramref name="transform"/>(<paramref name="actual"/>) satisfies <paramref name="predicate"/></summary>
            <returns>actual</returns>
        </member>
        <member name="M:TestBase.BasicShoulds.Should``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> satisfies <paramref name="predicate"/></summary>
            <returns>actual</returns>
        </member>
        <member name="M:TestBase.BasicShoulds.ShouldHave``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>A synonym for <seealso cref="M:TestBase.BasicShoulds.Should``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])"/>
            Asserts that <paramref name="actual"/> satisfies <paramref name="predicate"/></summary>
            <returns>actual</returns>
        </member>
        <member name="M:TestBase.BasicShoulds.Should``1(``0,System.Action{``0})">
            <summary>
             Applies <paramref name="assertion"/> to <paramref name="actual"/> and returns <paramref name="actual"/>.
             There is no check that <paramref name="assertion"/> asserts anything. If it doesn't, <paramref name="actual"/> is returned.
             
             This is intended as a convenience overload for the case where e.g. you prefer
             <code> actual
               .Should(a=> a.SomeProperty.ShouldBeGreaterThan(1))
               .Should(a=> a.SomeOtherProperty.ShouldBeGreaterThan(2))
               .Should(a=> someOtherPredicate )
             </code>
             over
             <code>  
               actual.SomeProperty.ShouldBeGreaterThan(1)
               actual.SomeOtherProperty.ShouldBeGreaterThan(2);
               actual.SomeOtherPredicate()
             </code>
             </summary>
             <param name="actual">the value under test</param>
             <param name="assertion">An action. It is assumed to be an assertion</param>
             <returns><paramref name="actual"/></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:TestBase.EqualsByValueShoulds.ShouldEqualByValue``1(``0,``0,System.String,System.Object[])" -->
        <!-- Badly formed XML comment ignored for member "M:TestBase.EqualsByValueShoulds.ShouldEqualByValue``1(``0,System.Object,System.String,System.Object[])" -->
        <!-- Badly formed XML comment ignored for member "M:TestBase.EqualsByValueShoulds.ShouldEqualByValueExceptFor``1(``0,System.Object,System.Collections.Generic.IEnumerable{System.String},System.String,System.Object[])" -->
        <!-- Badly formed XML comment ignored for member "M:TestBase.EqualsByValueShoulds.ShouldEqualByValueExceptForValues``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])" -->
        <member name="M:TestBase.EqualsByValueShoulds.ShouldEqualByValueExceptForValuesIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>
            Assert equality-by-value by recursively iterating over all elements 
            and all properties. Recursion stops at value types and at types (including string) which override Equals()
            <see cref="M:TestBase.Comparer.MemberCompare(System.Object,System.Object,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Double,System.Boolean)"/>
            </summary>
            <param name="exclusions">a possibly empty list of field names to exclude for the purposes of this 
            comparison. To exclude fields of fields, provide the full dotted 'breadcrumb' to the property 
            to exclude, e.g. new List&lt;string&gt;{"Id","SomeProperty.SomePropertyOfThat.FieldName"} 
            </param>
            <returns><param name="@this"></param></returns>
            <exception cref="T:TestBase.Assertion">Returns a message indicating where the comparision failed</exception>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldContain``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> contains an element satisfying <paramref name="predicate"/></summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldNotContain``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> does not contain an element satisfying <paramref name="predicate"/></summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldContain``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> contains an element such that element.Equals(<paramref name="expectedItem"/>)</summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldNotContain``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> does not contains an element such that element.Equals(<paramref name="unexpectedItem"/>)</summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldNotBeEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> is not empty</summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldNotBeNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> is not null or empty</summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldNotBeEmpty``1(``0,System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> is not empty</summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldBeEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> is empty</summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldNotHaveAny``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> has no elements satisfying <paramref name="predicate"/></summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldBeOfLength``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String,System.Object[])">
            <summary>Synonym for <see cref="M:TestBase.IEnumerableShoulds.ShouldBeOfLength``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String,System.Object[])"/></summary>
            <param name="expected">expected length</param>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldHaveCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.String,System.Object[])">
            <summary>Assert that <paramref name="actual"/> has <paramref name="expected"/> elements</summary>
            <param name="expected">expected length</param>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.SingleOrAssertFail``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
            <summary>returns the Single element of <paramref name="actual"/> or throws an <see cref="T:TestBase.Assertion"/> if there isn't exactly one element</summary>
            <returns>the single element</returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.SingleOrAssertFail``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.String,System.Object[])">
             <summary>returns the Single element of <paramref name="actual"/> which satisfies <paramref name="predicate"/> 
             or throws an <see cref="T:TestBase.Assertion"/> if there isn't exactly one element</summary>
            <returns>the single matched element</returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldContainKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> contains the key <paramref name="key"/></summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldNotContainKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String,System.Object[])">
            <summary>Asserts that <paramref name="actual"/> does not contain the key <paramref name="key"/></summary>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Assert that <paramref name="itemAssertion"/> is true of each item in <paramref name="actual"/>
            </summary>
            <param name="itemAssertion">The assertion to apply</param>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldAll``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>
            Assert that <paramref name="constraintPerItem"/> is true of each item in <paramref name="actual"/>
            </summary>
            <param name="constraintPerItem">The constraint to test</param>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldAll``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,System.Object[])">
            <summary>
            Apply <paramref name="transformation"/>  to each item of <paramref name="actual"/>,
            and then Assert that <paramref name="constraintPerItem"/> is true of each transformed item in <paramref name="actual"/>
            </summary>
            <param name="constraintPerItem">The constraint to test</param>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldAllBeSuchThat``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>
            Synonym for <see cref="M:TestBase.IEnumerableShoulds.ShouldAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})"/>
            Assert that <paramref name="constraintPerItem"/> is true of each item in <paramref name="actual"/>
            </summary>
            <param name="constraintPerItem">The constraint to test</param>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldAllSatisfy``1(System.Collections.Generic.IEnumerable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String,System.Object[])">
            <summary>
            Synonym for <see cref="M:TestBase.IEnumerableShoulds.ShouldAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})"/>
            Assert that <paramref name="constraintPerItem"/> is true of each item in <paramref name="actual"/>
            </summary>
            <param name="constraintPerItem">The constraint to test</param>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.IEnumerableShoulds.ShouldAllSatisfy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Linq.Expressions.Expression{System.Func{``1,System.Boolean}},System.String,System.Object[])">
            <summary>
            Synonym for <see cref="M:TestBase.IEnumerableShoulds.ShouldAll``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})"/>
            Apply <paramref name="transformBeforeAsserting"/>  to each item of <paramref name="actual"/>,
            and then Assert that <paramref name="constraintPerItem"/> is true of each transformed item in <paramref name="actual"/>
            </summary>
            <param name="constraintPerItem">The constraint to test</param>
            <returns><paramref name="actual"/></returns>
        </member>
        <member name="M:TestBase.JQueryablePropertyValueShoulds.Property``2(``0,System.String,``1,System.String,System.Object[])">
            <summary>
            <para>Passes if <paramref name="actual"/> has a property named (where named can be a dotted path to a property name) <paramref name="jsonexpression"/> with value <paramref name="expected"/></para>
            <para>The property value is extracted using <see cref="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)"/> and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)"/></para>
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TValue"></typeparam>
            <param name="actual">the value being tested</param>
            <param name="jsonexpression">A Json syntax expression naming a property of <paramref name="actual"/> e.g. "length" or "agents.rows[0].telephone"</param>
            <param name="expected">the expected value</param>
            <returns><paramref name="actual"/> if the assertion passes. Throws otherwise.</returns>
        </member>
        <member name="M:TestBase.JQueryablePropertyValueShoulds.Property``1(``0,System.String,System.Type)">
            <summary>
            <para>Returns a property on <paramref name="actual"/> named �where named can also mean a dotted path to a property name� <paramref name="jsonexpression"/></para>
            <para>The property value is extracted using <see cref="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)"/> and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)"/></para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actual">the value being tested</param>
            <param name="jsonexpression">A Json syntax expression naming a property of <paramref name="actual"/> e.g. "length" or "agents.rows[0].telephone"</param>
            <param name="type">type <see cref="T:System.Type"/> of the expected value. The found property is converted to this type and then returned.</param>
            <returns>The property of <paramref name="actual"/> named by <paramref name="jsonexpression"/></returns>
        </member>
        <member name="M:TestBase.JQueryablePropertyValueShoulds.Property``1(System.Object,System.String)">
            <summary>
            <para>Returns a property on <paramref name="actual"/> named �where named can also mean a dotted path to a property name� <paramref name="jsonexpression"/></para>
            <para>The property value is extracted using <see cref="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)"/> and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)"/></para>
            </summary>
            <typeparam name="TValue">The found property is converted to this type and then returned.</typeparam>
            <param name="actual">the value being tested</param>
            <param name="jsonexpression">A Json syntax expression naming a property of <paramref name="actual"/> e.g. "length" or "agents.rows[0].telephone"</param>
            <returns>The property of <paramref name="actual"/> named by <paramref name="jsonexpression"/></returns>
        </member>
        <member name="M:TestBase.JQueryablePropertyValueShoulds.PropertyEnumerable``1(System.Object,System.String)">
            <summary>
            <para>Returns a property on <paramref name="actual"/> named �where named can also mean a dotted path to a property name� <paramref name="jsonexpression"/></para>
            <para>The property value is extracted using <see cref="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)"/> and <see cref="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)"/></para>
            </summary>
            <typeparam name="TValue">The found property is converted to <see cref="T:System.Collections.Generic.IEnumerable`1"/> and then returned.</typeparam>
            <param name="actual">the value being tested</param>
            <param name="jsonexpression">A Json syntax expression naming a property of <paramref name="actual"/> e.g. "length" or "agents.rows[0].telephone"</param>
            <returns>The property of <paramref name="actual"/> named by <paramref name="jsonexpression"/>, as a <see cref="T:System.Collections.Generic.IEnumerable`1"/> </returns>
        </member>
        <member name="T:TestBase.Numerics">
            <summary>
            The Numerics class contains common operations on numeric values.
            </summary>
        </member>
        <member name="M:TestBase.Numerics.IsNumericType(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a numeric type</returns>
        </member>
        <member name="M:TestBase.Numerics.IsFloatingPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a floating point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a floating point numeric type</returns>
        </member>
        <member name="M:TestBase.Numerics.IsFixedPointNumeric(System.Object)">
            <summary>
            Checks the type of the object, returning true if
            the object is a fixed point numeric type.
            </summary>
            <param name="obj">The object to check</param>
            <returns>true if the object is a fixed point numeric type</returns>
        </member>
        <member name="M:TestBase.Numerics.AreEqual(System.Object,System.Object,System.Double)">
            <summary>
            Test two numeric values for equality, performing the usual numeric 
            conversions and using a provided or default tolerance. If the tolerance 
            provided is Empty, this method may set it to a default tolerance.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <param name="tolerance">A reference to the tolerance in effect</param>
            <returns>True if the values are equal</returns>
        </member>
        <member name="M:TestBase.Numerics.Compare(System.Object,System.Object)">
            <summary>
            Compare two numeric values, performing the usual numeric conversions.
            </summary>
            <param name="expected">The expected value</param>
            <param name="actual">The actual value</param>
            <returns>The relationship of the values to each other</returns>
        </member>
        <member name="M:TestBase.NumericShouldsWithTolerance.ShouldEqualWithTolerance``1(``0,System.Double,System.Double,System.String,System.Object[])">
            <summary>Accepts 2 <see cref="T:System.Double"/>s as equal if they are within <paramref name="tolerance"/> of each other.</summary>
        </member>
        <member name="M:TestBase.NumericShouldsWithTolerance.ShouldNotEqualWithMargin``1(``0,System.Double,System.Double,System.String,System.Object[])">
            <summary>Accepts 2 <see cref="T:System.Double"/>s as not equal only if they differ by at least <paramref name="tolerance"/>.</summary>
        </member>
        <member name="M:TestBase.NumericShouldsWithTolerance.ShouldBeBetweenWithTolerance``1(``0,System.Double,System.Double,System.Double,System.String,System.Object[])">
            <summary>Assert that <paramref name="this"/> is between <paramref name="left"/>-<paramref name="tolerance"/> and <paramref name="right"/>+<paramref name="tolerance"/></summary>
        </member>
        <member name="M:TestBase.NumericShouldsWithTolerance.ShouldBeGreaterThanWithTolerance``1(``0,System.Double,System.Double,System.String,System.Object[])">
            <summary>Assert that <paramref name="this"/> is greater than <paramref name="expectedValue"/>-<paramref name="tolerance"/></summary>
        </member>
        <member name="M:TestBase.NumericShouldsWithTolerance.ShouldBeGreaterThanOrEqualToWithTolerance``1(``0,System.Double,System.Double,System.String,System.Object[])">
            <summary>Assert that <paramref name="this"/> is greater than or equal to <paramref name="expectedValue"/>-<paramref name="tolerance"/></summary>
        </member>
        <member name="M:TestBase.NumericShouldsWithTolerance.ShouldBeLessThanWithTolerance``1(``0,System.Double,System.Double,System.String,System.Object[])">
            <summary>Assert that <paramref name="this"/> is less than <paramref name="expectedValue"/>+<paramref name="tolerance"/></summary>
        </member>
        <member name="M:TestBase.NumericShouldsWithTolerance.ShouldBeLessThanOrEqualToWithTolerance``1(``0,System.Double,System.Double,System.String,System.Object[])">
            <summary>Assert that <paramref name="this"/> is less than or equal to <paramref name="expectedValue"/>+<paramref name="tolerance"/></summary>
        </member>
        <member name="T:TestBase.NUnitComparer">
            <summary>
            NUnitComparer encapsulates NUnit's default behavior
            in comparing two objects.
            </summary>
        </member>
        <member name="P:TestBase.NUnitComparer.Default">
            <summary>
            Returns the default NUnitComparer.
            </summary>
        </member>
        <member name="M:TestBase.NUnitComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:TestBase.StreamShoulds.ShouldContain(System.IO.Stream,System.IO.Stream,System.String,System.Object[])">
            <summary>Assert this <paramref name="@this"/>, considered as a byte[], contains <paramref name="expected"/> as a substring.</summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StreamShoulds.ShouldContain(System.IO.Stream,System.Byte[],System.String,System.Object[])">
            <summary>Assert this <paramref name="@this"/>, considered as a byte[], contains <paramref name="expected"/> as a substring.</summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StreamShoulds.ShouldEqualByStreamContent``2(``0,``1,System.String,System.Object[])">
            <summary>Synonym for <seealso cref="M:TestBase.StreamShoulds.ShouldHaveSameStreamContentAs``2(``0,``1,System.String,System.Object[])"/> Assert this <paramref name="@this"/> and <paramref name="expected"/> are byte-for-byte identical</summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StreamShoulds.ShouldHaveSameStreamContentAs``2(``0,``1,System.String,System.Object[])">
            <summary>Assert this <paramref name="@this"/> and <paramref name="expected"/> are byte-for-byte identical</summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StringShoulds.ShouldEqualIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>Asserts that <paramref name="@this"/>.ToLower() equals <paramref name="expected"/>.ToLower()</summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StringShoulds.ShouldContain(System.String,System.String,System.String,System.Object[])">
            <summary>Asserts that <paramref name="@this"/> .Contains(<paramref name="expected"/>)</summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StringShoulds.ShouldBeContainedIn(System.String,System.String,System.String,System.Object[])">
            <summary>Asserts that <paramref name="expected"/>.Contains(<paramref name="@this"/>)</summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StringShoulds.ShouldMatch(System.String,System.String,System.String,System.Object[])">
            <summary>Asserts that the <see cref="T:System.Text.RegularExpressions.Regex"/> from <paramref name="expectedRegexPattern"/> matches <paramref name="@this"/></summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StringShoulds.ShouldMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.Object[])">
            <summary>Asserts that the <see cref="T:System.Text.RegularExpressions.Regex"/> from <paramref name="expectedRegexPattern"/> with <paramref name="regexOptions"/> matches <paramref name="@this"/></summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StringShoulds.ShouldMatchIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>Asserts that the <see cref="T:System.Text.RegularExpressions.Regex"/> from <paramref name="expectedRegexPattern"/> matches <paramref name="@this"/> given <seealso cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/> </summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StringShoulds.ShouldNotMatch(System.String,System.String,System.String,System.Object[])">
            <summary>Asserts that the <see cref="T:System.Text.RegularExpressions.Regex"/> from <paramref name="unexpectedRegexPattern"/> does not match <paramref name="@this"/></summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StringShoulds.ShouldNotMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.Object[])">
            <summary>Asserts that the <see cref="T:System.Text.RegularExpressions.Regex"/> from <paramref name="unexpectedRegexPattern"/> with <paramref name="regexOptions"/> does not match <paramref name="@this"/></summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StringShoulds.ShouldNotMatchIgnoringCase(System.String,System.String,System.String,System.Object[])">
            <summary>Asserts that the <see cref="T:System.Text.RegularExpressions.Regex"/> from <paramref name="unexpectedRegexPattern"/> does not match <paramref name="@this"/> given <seealso cref="F:System.Text.RegularExpressions.RegexOptions.IgnoreCase"/></summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StringShoulds.ShouldNotContain(System.String,System.String,System.String,System.Object[])">
            <summary>Asserts that <paramref name="@this"/> .Contains(<paramref name="expected"/>) is false.</summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StringShoulds.ShouldStartWith(System.String,System.String,System.String,System.Object[])">
            <summary>Asserts that <paramref name="@this"/>.StartsWith(<paramref name="expected"/>).</summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.StringShoulds.ShouldEndWith(System.String,System.String,System.String,System.Object[])">
            <summary>Asserts that <paramref name="@this"/> .EndsWith(<paramref name="expected"/>).</summary>
            <returns>@this</returns>
        </member>
        <member name="M:TestBase.HenriFormatter.Formatz(System.String,System.Object)">
            <summary>
            String formatting based on names not numbers.
            Example: "{name} {phone}".Formatz(new{name,phone});
            </summary>
            <param name="format">The string containing format names</param>
            <param name="source">The object with named properties</param>
            <returns></returns>
        </member>
    </members>
</doc>
